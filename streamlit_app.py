# =============================================================================
# KALKUL√ÅTOR SOUTƒö≈ΩN√çHO WORKSHOPU - OPTIMALIZOVAN√Å VERZIA
# =============================================================================

# --- Importy ---
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER
import matplotlib.pyplot as plt
import numpy as np

# --- Kon≈°tanty ---
PHASES = [
    'Analytick√° f√°ze',
    'P≈ô√≠pravn√≠ f√°ze', 
    'Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu (SW)',
    'Vyhl√°≈°en√≠ v√Ωsledk≈Ø SW',
    'PR podpora v pr≈Øbƒõhu cel√© soutƒõ≈æe',
    'Dal≈°√≠ n√°klady - extern√≠ dodavatel√©',
    'Odmƒõny'
]

PHASE_COLORS = {
    'Analytick√° f√°ze': '#059669',
    'P≈ô√≠pravn√≠ f√°ze': '#10b981',
    'Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu (SW)': '#dc2626',
    'Vyhl√°≈°en√≠ v√Ωsledk≈Ø SW': '#7c3aed',
    'PR podpora v pr≈Øbƒõhu cel√© soutƒõ≈æe': '#ea580c',
    'Dal≈°√≠ n√°klady - extern√≠ dodavatel√©': '#0891b2',
    'Odmƒõny': '#be185d'
}

# --- Konfigur√°cia aplik√°cie ---
PAGE_CONFIG = {
    'page_title': "Kalkul√°tor soutƒõ≈æn√≠ho workshopu",
    'page_icon': "üèóÔ∏è",
    'layout': "wide"
}

# --- D√°ta aktiv√≠t ---
ACTIVITIES_DATA = [
    # Analytick√° f√°ze
    {'F√°ze': 'Analytick√° f√°ze', 'Aktivita': 'Anal√Ωza zad√°n√≠ soutƒõ≈æe', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 15000, 'Jednotka': 'ks'},
    {'F√°ze': 'Analytick√° f√°ze', 'Aktivita': 'Pr≈Øzkum lokality', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 8000, 'Jednotka': 'ks'},
    {'F√°ze': 'Analytick√° f√°ze', 'Aktivita': 'Studie kontextu', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 12000, 'Jednotka': 'ks'},
    
    # P≈ô√≠pravn√≠ f√°ze
    {'F√°ze': 'P≈ô√≠pravn√≠ f√°ze', 'Aktivita': 'P≈ô√≠prava workshopu', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 25000, 'Jednotka': 'ks'},
    {'F√°ze': 'P≈ô√≠pravn√≠ f√°ze', 'Aktivita': 'Koordinace √∫ƒçastn√≠k≈Ø', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 15000, 'Jednotka': 'ks'},
    {'F√°ze': 'P≈ô√≠pravn√≠ f√°ze', 'Aktivita': 'P≈ô√≠prava materi√°l≈Ø', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 18000, 'Jednotka': 'ks'},
    
    # Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu
    {'F√°ze': 'Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu (SW)', 'Aktivita': 'Realizace workshopu', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 50000, 'Jednotka': 'ks'},
    {'F√°ze': 'Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu (SW)', 'Aktivita': 'Moderace workshopu', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 30000, 'Jednotka': 'ks'},
    {'F√°ze': 'Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu (SW)', 'Aktivita': 'Technick√° podpora', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 20000, 'Jednotka': 'ks'},
    
    # Vyhl√°≈°en√≠ v√Ωsledk≈Ø
    {'F√°ze': 'Vyhl√°≈°en√≠ v√Ωsledk≈Ø SW', 'Aktivita': 'Vyhodnocen√≠ n√°vrh≈Ø', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 25000, 'Jednotka': 'ks'},
    {'F√°ze': 'Vyhl√°≈°en√≠ v√Ωsledk≈Ø SW', 'Aktivita': 'P≈ô√≠prava z√°vƒõreƒçn√© zpr√°vy', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 15000, 'Jednotka': 'ks'},
    {'F√°ze': 'Vyhl√°≈°en√≠ v√Ωsledk≈Ø SW', 'Aktivita': 'Prezentace v√Ωsledk≈Ø', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 12000, 'Jednotka': 'ks'},
    
    # PR podpora
    {'F√°ze': 'PR podpora v pr≈Øbƒõhu cel√© soutƒõ≈æe', 'Aktivita': 'Komunikace s m√©dii', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 20000, 'Jednotka': 'ks'},
    {'F√°ze': 'PR podpora v pr≈Øbƒõhu cel√© soutƒõ≈æe', 'Aktivita': 'Soci√°ln√≠ s√≠tƒõ', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 15000, 'Jednotka': 'ks'},
    {'F√°ze': 'PR podpora v pr≈Øbƒõhu cel√© soutƒõ≈æe', 'Aktivita': 'Tiskov√© zpr√°vy', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 10000, 'Jednotka': 'ks'},
    
    # Extern√≠ dodavatel√©
    {'F√°ze': 'Dal≈°√≠ n√°klady - extern√≠ dodavatel√©', 'Aktivita': 'Extern√≠ konzultant', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 35000, 'Jednotka': 'ks'},
    {'F√°ze': 'Dal≈°√≠ n√°klady - extern√≠ dodavatel√©', 'Aktivita': 'Pr√°vn√≠ slu≈æby', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 25000, 'Jednotka': 'ks'},
    {'F√°ze': 'Dal≈°√≠ n√°klady - extern√≠ dodavatel√©', 'Aktivita': 'Technick√© vybaven√≠', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 30000, 'Jednotka': 'ks'},
    
    # Odmƒõny
    {'F√°ze': 'Odmƒõny', 'Aktivita': 'Odmƒõna pro v√≠tƒõze', 'Mno≈æstv√≠': 1, 'Cena za jednotku': 50000, 'Jednotka': 'ks'},
    {'F√°ze': 'Odmƒõny', 'Aktivita': 'Odmƒõna pro finalisty', 'Mno≈æstv√≠': 3, 'Cena za jednotku': 15000, 'Jednotka': 'ks'},
    {'F√°ze': 'Odmƒõny', 'Aktivita': 'Speci√°ln√≠ ocenƒõn√≠', 'Mno≈æstv√≠': 2, 'Cena za jednotku': 10000, 'Jednotka': 'ks'}
]

# --- Pomocn√© funkcie ---
def create_activities_dataframe():
    """Vytvor√≠ DataFrame s aktivitami z kon≈°t√°nt"""
    return pd.DataFrame(ACTIVITIES_DATA)

def calculate_costs(df, variant_multiplier, unit_type_multiplier):
    """Vypoƒç√≠ta n√°klady na z√°klade multiplik√°torov"""
    df = df.copy()
    df['Upraven√© mno≈æstv√≠'] = df['Mno≈æstv√≠'] * variant_multiplier
    df['Upraven√° cena za jednotku'] = df['Cena za jednotku'] * unit_type_multiplier
    df['N√°klady'] = df['Upraven√© mno≈æstv√≠'] * df['Upraven√° cena za jednotku']
    return df

def get_phase_summary(df):
    """Vr√°ti s√∫hrn n√°kladov podƒæa f√°z"""
    phase_costs = df.groupby('F√°ze')['N√°klady'].sum().reindex(PHASES, fill_value=0)
    return phase_costs

def create_sunburst_chart(df):
    """Vytvor√≠ sunburst graf s hierarchiou f√°zy -> aktivity"""
    if df.empty:
        return go.Figure()
    
    # Vytvor√≠me hierarchiu f√°zy -> aktivity
    fig_data = []
    for _, row in df.iterrows():
        fig_data.append({
            'ids': [f"{row['F√°ze']}", f"{row['F√°ze']}-{row['Aktivita']}"],
            'labels': [row['F√°ze'], row['Aktivita']],
            'parents': ['', row['F√°ze']],
            'values': [row['N√°klady'], row['N√°klady']],
            'customdata': [[row['F√°ze'], f"{row['N√°klady']:,.0f} Kƒç"], 
                          [row['Aktivita'], f"{row['N√°klady']:,.0f} Kƒç"]]
        })
    
    # Zoskup√≠me d√°ta
    all_ids = []
    all_labels = []
    all_parents = []
    all_values = []
    all_customdata = []
    
    for data in fig_data:
        all_ids.extend(data['ids'])
        all_labels.extend(data['labels'])
        all_parents.extend(data['parents'])
        all_values.extend(data['values'])
        all_customdata.extend(data['customdata'])
    
    fig = go.Figure(go.Sunburst(
        ids=all_ids,
        labels=all_labels,
        parents=all_parents,
        values=all_values,
        customdata=all_customdata,
        hovertemplate='<b>%{label}</b><br>N√°klady: %{customdata[1]}<extra></extra>',
        branchvalues='total',
        marker=dict(colors=[PHASE_COLORS.get(label, '#6b7280') for label in all_labels]),
        textinfo='label+value'
    ))
    
    fig.update_layout(
        title={
            'text': 'Rozlo≈æen√≠ n√°klad≈Ø podle f√°z√≠ a aktivit',
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 20, 'color': '#059669'}
        },
        width=800,
        height=600,
        margin=dict(t=80, l=20, r=20, b=20),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)'
    )
    
    return fig

# --- Funkcia na generovanie PDF fakt√∫ry ---
def generate_invoice_pdf(selected_activities, total_cost, variant, unit_type):
    """Generuje PDF fakt√∫ru s detailn√Ωm rozpisom"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    story = []
    styles = getSampleStyleSheet()
    
    # ≈†t√Ωly
    title_style = ParagraphStyle('CustomTitle', 
                                parent=styles['Heading1'], 
                                fontSize=24, 
                                spaceAfter=30, 
                                alignment=TA_CENTER, 
                                textColor=colors.HexColor('#059669'))
    
    heading_style = ParagraphStyle('CustomHeading', 
                                  parent=styles['Heading2'], 
                                  fontSize=16, 
                                  spaceAfter=12, 
                                  textColor=colors.HexColor('#059669'))
    
    # Hlaviƒçka
    story.append(Paragraph("KALKULACE SOUTƒö≈ΩN√çHO WORKSHOPU", title_style))
    story.append(Spacer(1, 20))
    
    # Inform√°cie o projekte
    project_info = [
        ["D√°tum:", datetime.now().strftime("%d.%m.%Y")],
        ["Variant:", variant],
        ["Typ jednotiek:", unit_type],
        ["Celkov√© n√°klady:", f"{total_cost:,.0f} Kƒç"],
        ["Poƒçet aktivit:", str(len(selected_activities))]
    ]
    
    project_table = Table(project_info, colWidths=[2*inch, 4*inch])
    project_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f9ff')),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#059669')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 12),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
    ]))
    story.append(project_table)
    story.append(Spacer(1, 30))
    
    # Graf podƒæa f√°z
    if len(selected_activities) > 0:
        story.append(Paragraph("ROZLO≈ΩEN√ç N√ÅKLAD≈Æ PODLE F√ÅZ", heading_style))
        story.append(Spacer(1, 15))
        
        plt.figure(figsize=(8, 4))
        phase_costs = get_phase_summary(selected_activities)
        plt.pie(phase_costs.values, 
                labels=phase_costs.index, 
                autopct='%1.1f%%', 
                colors=[PHASE_COLORS[p] for p in PHASES], 
                startangle=90)
        plt.title('Rozlo≈æen√≠ n√°klad≈Ø podle f√°z√≠', 
                 fontsize=16, 
                 fontweight='bold', 
                 color='#059669')
        plt.axis('equal')
        
        img_buffer = BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        img = Image(img_buffer)
        img.drawHeight = 3*inch
        img.drawWidth = 5*inch
        story.append(img)
        story.append(Spacer(1, 20))
    
    # Detailn√Ω rozpis
    story.append(Paragraph("DETAILN√ç ROZPIS AKTIVIT", heading_style))
    story.append(Spacer(1, 15))
    
    table_data = [['F√°ze', 'Aktivita', 'Mno≈æstv√≠', 'Cena za jednotku', 'Celkov√° cena']]
    for _, row in selected_activities.iterrows():
        table_data.append([
            row['F√°ze'], 
            row['Aktivita'], 
            f"{row['Upraven√© mno≈æstv√≠']:.1f}", 
            f"{row['Upraven√° cena za jednotku']:,.0f} Kƒç", 
            f"{row['N√°klady']:,.0f} Kƒç"
        ])
    
    table = Table(table_data, colWidths=[1.5*inch, 2.5*inch, 1*inch, 1.5*inch, 1.5*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#059669')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('ALIGN', (2, 1), (-1, -1), 'RIGHT'),
        ('ALIGN', (0, 1), (1, -1), 'LEFT'),
    ]))
    story.append(table)
    story.append(Spacer(1, 30))
    
    # S√∫hrn
    story.append(Paragraph("SOUHRN", heading_style))
    story.append(Spacer(1, 15))
    
    avg_cost = total_cost/len(selected_activities) if len(selected_activities) > 0 else 0
    summary_data = [
        ['Celkov√© n√°klady:', f"{total_cost:,.0f} Kƒç"],
        ['Poƒçet aktivit:', str(len(selected_activities))],
        ['Pr≈Ømƒõrn√° cena na aktivitu:', f"{avg_cost:,.0f} Kƒç"]
    ]
    
    summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f9ff')),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#059669')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 12),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
    ]))
    story.append(summary_table)
    
    # P√§tiƒçka
    story.append(Spacer(1, 40))
    footer_style = ParagraphStyle('Footer', 
                                 parent=styles['Normal'], 
                                 fontSize=10, 
                                 alignment=TA_CENTER, 
                                 textColor=colors.grey)
    story.append(Paragraph("Vygenerov√°no pomoc√≠ 4CT Platform Kalkul√°toru soutƒõ≈æn√≠ho workshopu", footer_style))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

# --- Streamlit UI ---
st.set_page_config(**PAGE_CONFIG)

# --- CSS ≈†t√Ωly ---
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;900&display=swap');
    html, body, .main { background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%) !important; font-family: 'Inter', sans-serif; }
    .main-header {
        background: linear-gradient(120deg, #059669 0%, #10b981 40%, #34d399 100%);
        padding: 4rem 2rem 2.5rem 2rem;
        margin: -2rem -2rem 2.5rem -2rem;
        color: white;
        text-align: center;
        border-radius: 0 0 2.5rem 2.5rem;
        box-shadow: 0 12px 48px rgba(5,150,105,0.18);
        position: relative;
        overflow: hidden;
    }
    .main-header h1 {
        font-size: 3rem;
        font-weight: 900;
        margin-bottom: 0.5rem;
        letter-spacing: -0.03em;
        text-shadow: 0 2px 16px rgba(5,150,105,0.12);
    }
    .main-header p {
        font-size: 1.25rem;
        font-weight: 400;
        opacity: 0.95;
        margin-bottom: 0.5rem;
    }
    .main-header .brand-logo {
        display: inline-block;
        background: rgba(255,255,255,0.13);
        padding: 0.5rem 1.5rem;
        border-radius: 1rem;
        font-weight: 700;
        font-size: 1.1rem;
        margin-top: 1.5rem;
        letter-spacing: 0.08em;
        box-shadow: 0 2px 12px rgba(5,150,105,0.08);
    }
    .main-header .hero-bg {
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        background: url('data:image/svg+xml;utf8,<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg"><rect fill="none"/><circle cx="80" cy="80" r="60" fill="%2310b981" fill-opacity="0.08"/><circle cx="90%" cy="30" r="80" fill="%23059669" fill-opacity="0.06"/><rect x="60%" y="60%" width="120" height="120" rx="30" fill="%2334d399" fill-opacity="0.07"/></svg>');
        z-index: 0;
        pointer-events: none;
    }
    .sidebar-header {
        background: linear-gradient(120deg, #059669 0%, #10b981 100%);
        padding: 2rem 1rem 1.5rem 1rem;
        border-radius: 1.5rem;
        color: white;
        margin-bottom: 2rem;
        text-align: center;
        font-weight: 700;
        font-size: 1.2rem;
        box-shadow: 0 4px 24px rgba(5,150,105,0.10);
        position: sticky;
        top: 1.5rem;
        z-index: 10;
    }
    .stRadio, .stMultiSelect, .stButton, .stCheckbox {
        font-size: 1.1rem !important;
    }
    .metric-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
        border-radius: 1.5rem;
        padding: 2rem;
        margin: 1rem 0;
        box-shadow: 0 8px 32px rgba(5,150,105,0.08);
        border: 1px solid rgba(5,150,105,0.1);
        text-align: center;
        transition: all 0.3s ease;
    }
    .metric-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 48px rgba(5,150,105,0.12);
    }
    .metric-card h3 {
        color: #059669;
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    .metric-card h2 {
        color: #1e293b;
        font-size: 2.5rem;
        font-weight: 900;
        margin-bottom: 0.5rem;
        line-height: 1;
    }
    .metric-card p {
        color: #64748b;
        font-size: 0.9rem;
        margin: 0;
    }
    .phase-header {
        background: linear-gradient(120deg, #059669 0%, #10b981 100%);
        padding: 1.5rem 2rem;
        border-radius: 1rem;
        color: white;
        margin: 2rem 0 1rem 0;
        text-align: center;
        font-weight: 700;
        font-size: 1.3rem;
        box-shadow: 0 8px 32px rgba(5,150,105,0.15);
    }
    .progress-bar {
        height: 4px;
        background: linear-gradient(90deg, #059669 0%, #10b981 50%, #34d399 100%);
        border-radius: 2px;
        margin: 2rem 0;
        animation: shimmer 2s ease-in-out infinite;
    }
    @keyframes shimmer {
        0% { opacity: 0.7; }
        50% { opacity: 1; }
        100% { opacity: 0.7; }
    }
    .chart-container {
        background: rgba(255,255,255,0.95);
        border-radius: 1.5rem;
        padding: 2rem;
        margin: 2rem 0;
        box-shadow: 0 8px 32px rgba(5,150,105,0.08);
        border: 1px solid rgba(5,150,105,0.1);
    }
    .sticky-summary {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        background: linear-gradient(135deg, #059669 0%, #10b981 100%);
        color: white;
        padding: 1.5rem 2rem;
        border-radius: 1rem;
        box-shadow: 0 12px 48px rgba(5,150,105,0.25);
        z-index: 1000;
        min-width: 300px;
        backdrop-filter: blur(10px);
    }
    .sticky-summary h4 {
        margin: 0 0 0.5rem 0;
        font-size: 1.1rem;
        font-weight: 700;
    }
    .sticky-summary .total-cost {
        font-size: 2rem;
        font-weight: 900;
        margin: 0.5rem 0;
    }
    .sticky-summary .activity-count {
        font-size: 1rem;
        opacity: 0.9;
    }
</style>
""", unsafe_allow_html=True)

# --- Hlaviƒçka aplik√°cie ---
st.markdown("""
<div class="main-header">
    <div class="hero-bg"></div>
    <h1>üèóÔ∏è Kalkul√°tor soutƒõ≈æn√≠ho workshopu</h1>
    <p>Profesion√°ln√≠ n√°stroj pro kalkulaci n√°klad≈Ø architektonick√Ωch soutƒõ≈æ√≠</p>
    <div class="brand-logo">4CT Platform</div>
</div>
""", unsafe_allow_html=True)

# --- Sidebar ---
with st.sidebar:
    st.markdown('<div class="sidebar-header">‚öôÔ∏è Nastaven√≠</div>', unsafe_allow_html=True)
    
    # Variant
    variant = st.radio(
        "Vyberte variant:",
        ["CZ", "SK"],
        help="Vyberte variant pro kalkulaci."
    )
    
    # Typ jednotiek
    unit_type = st.radio(
        "Typ jednotek:",
        ["Poƒçet jednotek (zmƒõna MP)", "Poƒçet jednotek (MP+T)"],
        help="Vyberte typ jednotek pro kalkulaci."
    )

# --- Inicializ√°cia d√°t ---
df = create_activities_dataframe()

# --- Nastavenie stƒ∫pcov podƒæa variantu ---
if variant == "SK":
    variant_suffix = "SK"
else:
    variant_suffix = "CZ"
        
if unit_type == "Poƒçet jednotek (zmƒõna MP)":
    unit_col = f"Poƒçet MJ (MP) - {variant_suffix}"
    price_col = f"Cena (MP) - {variant_suffix}"
else:
    unit_col = f"Poƒçet MJ (MP+T) - {variant_suffix}"
    price_col = f"Cena (MP+T) - {variant_suffix}"

# --- Pridanie stƒ∫pcov pre edit√°ciu ---
df['Vybran√©'] = True
df['Upraven√© mno≈æstv√≠'] = df[unit_col]
df['Upraven√° cena za jednotku'] = df['Cena za jednotku']
df['Pozn√°mky'] = ''

# --- Filtrovanie f√°z ---
phases = df['F√°ze'].unique()
selected_phases = st.sidebar.multiselect(
    "Filtrujte f√°ze:",
    phases,
    default=phases,
    help="Vyberte f√°ze, kter√© chcete zobrazit."
)

# --- Filtrovanie d√°t ---
filtered_df = df[df['F√°ze'].isin(selected_phases)].copy()

# --- KPI karty ---
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown(f"""
    <div class="metric-card">
        <h3>Celkov√© n√°klady</h3>
        <h2>{filtered_df[price_col].sum():,.0f} Kƒç</h2>
        <p>Celkov√° suma</p>
    </div>
    """, unsafe_allow_html=True)
with col2:
    st.markdown(f"""
    <div class="metric-card">
        <h3>Poƒçet aktivit</h3>
        <h2>{len(filtered_df)}</h2>
        <p>Celkov√Ω poƒçet</p>
    </div>
    """, unsafe_allow_html=True)
with col3:
    st.markdown(f"""
    <div class="metric-card">
        <h3>Pr≈Ømƒõrn√° cena</h3>
        <h2>{filtered_df[price_col].mean():,.0f} Kƒç</h2>
        <p>Na aktivitu</p>
    </div>
    """, unsafe_allow_html=True)

# --- Progress bar ---
st.markdown("""
<div class="progress-bar"></div>
""", unsafe_allow_html=True)

# --- Interakt√≠vna tabuƒæka ---
st.markdown("""
<div class="phase-header">
    <h3>Interaktivn√≠ tabulka aktivit</h3>
</div>
""", unsafe_allow_html=True)

edited_df = st.data_editor(
    filtered_df[['Vybran√©', 'F√°ze', 'Aktivita', 'Upraven√© mno≈æstv√≠', 'Upraven√° cena za jednotku', 'Pozn√°mky']],
    num_rows="dynamic",
    use_container_width=True,
    column_config={
        "Vybran√©": st.column_config.CheckboxColumn("Vybran√©", help="Oznaƒçte aktivitu jako vybranou"),
        "F√°ze": st.column_config.TextColumn("F√°ze", disabled=True),
        "Aktivita": st.column_config.TextColumn("Aktivita", disabled=True),
        "Upraven√© mno≈æstv√≠": st.column_config.NumberColumn("Mno≈æstv√≠", min_value=0.0, step=0.5),
        "Upraven√° cena za jednotku": st.column_config.NumberColumn("Cena za jednotku (Kƒç)", min_value=0.0, step=1000.0),
        "Pozn√°mky": st.column_config.TextColumn("Pozn√°mky", max_chars=200)
    }
)

# --- V√Ωpoƒçet upraven√Ωch hodn√¥t ---
selected_activities = edited_df[edited_df['Vybran√©'] == True].copy()
selected_activities['N√°klady'] = selected_activities['Upraven√© mno≈æstv√≠'] * selected_activities['Upraven√° cena za jednotku']
total_selected_cost = selected_activities['N√°klady'].sum()

# --- V≈°etky f√°zy v p√¥vodnom porad√≠ ---
phase_order = [
    'Analytick√° f√°ze',
    'P≈ô√≠pravn√≠ f√°ze',
    'Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu (SW)',
    'Vyhl√°≈°en√≠ v√Ωsledk≈Ø SW',
    'PR podpora v pr≈Øbƒõhu cel√© soutƒõ≈æe',
    'Dal≈°√≠ n√°klady - extern√≠ dodavatel√©',
    'Odmƒõny'
]

# --- Pridaj ch√Ωbaj√∫ce f√°zy s nulov√Ωmi hodnotami ---
phase_costs = selected_activities.groupby('F√°ze')['N√°klady'].sum().reindex(phase_order, fill_value=0)

# --- Optimalizovan√© grafy ---
st.markdown("""
<div class="chart-container">
    <h3 style="text-align: center; color: #059669; margin-bottom: 2rem;">Vizualizace n√°klad≈Ø</h3>
</div>
""", unsafe_allow_html=True)

# Sunburst chart - hierarchie f√°zy -> aktivity
if len(selected_activities) > 0:
    fig_sunburst = px.sunburst(
        selected_activities,
        path=['F√°ze', 'Aktivita'],
        values='N√°klady',
        title="Hierarchick√© rozlo≈æen√≠ n√°klad≈Ø",
        color='F√°ze',
        color_discrete_map={
            'Analytick√° f√°ze': '#059669',
            'P≈ô√≠pravn√≠ f√°ze': '#10b981',
            'Pr≈Øbƒõh soutƒõ≈æn√≠ho workshopu (SW)': '#dc2626',
            'Vyhl√°≈°en√≠ v√Ωsledk≈Ø SW': '#7c3aed',
            'PR podpora v pr≈Øbƒõhu cel√© soutƒõ≈æe': '#ea580c',
            'Dal≈°√≠ n√°klady - extern√≠ dodavatel√©': '#0891b2',
            'Odmƒõny': '#be185d'
        }
    )
    fig_sunburst.update_layout(
        title_x=0.5,
        title_font_size=22,
        title_font_color='#059669',
        height=700,
        margin=dict(t=80, l=0, r=0, b=0),
        paper_bgcolor='rgba(255,255,255,0.98)',
        font=dict(family='Inter, sans-serif', size=18, color='#1e293b')
    )
    fig_sunburst.update_traces(
        hovertemplate='<b>%{label}</b><br>Celkov√© n√°klady: %{value:,.0f} Kƒç<extra></extra>',
        marker=dict(line=dict(width=3, color='white')),
        insidetextorientation='radial',
        textfont_size=16,
        textfont_color='white',
        textfont_family='Inter, sans-serif'
    )
    st.plotly_chart(fig_sunburst, use_container_width=True)
else:
    st.markdown("""
    <div style="text-align: center; padding: 3rem; color: #6b7280; font-size: 1.1rem;">
        <p>≈Ω√°dn√© aktivity nejsou vybr√°ny. Vyberte alespo≈à jednu aktivitu pro zobrazen√≠ grafu.</p>
    </div>
    """, unsafe_allow_html=True)

# --- Export ---
st.markdown("""
<div class="phase-header">
    <h3>Export dat</h3>
</div>
""", unsafe_allow_html=True)

# Excel Export
if st.button("üìä Export do Excel", type="primary", use_container_width=True):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        selected_activities.to_excel(writer, sheet_name='Vybran√© aktivity', index=False)
        if len(selected_activities) > 0:
            avg_cost = total_selected_cost / len(selected_activities)
        else:
            avg_cost = 0
        summary_data = {
            'Metrika': ['Celkov√© n√°klady', 'Poƒçet aktivit', 'Pr≈Ømƒõrn√° cena na aktivitu'],
            'Hodnota': [
                f"{total_selected_cost:,.0f} Kƒç",
                len(selected_activities),
                f"{avg_cost:,.0f} Kƒç"
            ]
        }
        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, sheet_name='Shrnut√≠', index=False)
    output.seek(0)
    st.download_button(
        label="üì• St√°hnout Excel soubor",
        data=output.getvalue(),
        file_name=f"kalkulace_soutezniho_workshopu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        use_container_width=True
    )

# PDF Export
if st.button("üìÑ Export do PDF", type="primary", use_container_width=True):
    if len(selected_activities) > 0:
        try:
            pdf_buffer = generate_invoice_pdf(selected_activities, total_selected_cost, variant, unit_type)
            st.download_button(
                label="üì• St√°hnout PDF fakt√∫ru",
                data=pdf_buffer.getvalue(),
                file_name=f"faktura_soutezniho_workshopu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                mime="application/pdf",
                use_container_width=True
            )
            st.success("‚úÖ PDF fakt√∫ra byla √∫spƒõ≈°nƒõ vygenerov√°na!")
        except Exception as e:
            st.error(f"‚ùå Chyba p≈ôi generov√°n√≠ PDF: {str(e)}")
    else:
        st.error("‚ùå Pro export do PDF je pot≈ôeba vybrat alespo≈à jednu aktivitu.")

# Reset
if st.button("üîÑ Reset hodnot", use_container_width=True):
    st.rerun()

# --- Sticky summary ---
if len(selected_activities) > 0:
    st.markdown(f"""
    <div class="sticky-summary">
        <h4>üìä Aktu√°ln√≠ souhrn</h4>
        <div class="total-cost">{total_selected_cost:,.0f} Kƒç</div>
        <div class="activity-count">{len(selected_activities)} aktivit vybr√°no</div>
    </div>
    """, unsafe_allow_html=True)

